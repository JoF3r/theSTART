{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"~$ whoami \u00b6 Jo\u00e3o \u2013 tech enthusiast, breaker of things, occasional fixer Hey, my name is Jo\u00e3o and I\u2019m a tech enthusiast who loves breaking things, not always fixing them, and sometimes learning along the way. I\u2019m currently a student, so between classes and life, I try to spend time diving into cybersecurity , playing CTFs , pwning machines on TryHackMe and HackTheBox , and tinkering with electronics . This repo is basically my personal brain dump , where I document my projects, things I\u2019m learning, and random experiments. \ud83d\udea7 Still a work in progress... updates will come whenever I get around to it! \ud83d\ude06 \ud83d\udcec Find me here: \u00b6","title":"Home"},{"location":"#whoami","text":"Jo\u00e3o \u2013 tech enthusiast, breaker of things, occasional fixer Hey, my name is Jo\u00e3o and I\u2019m a tech enthusiast who loves breaking things, not always fixing them, and sometimes learning along the way. I\u2019m currently a student, so between classes and life, I try to spend time diving into cybersecurity , playing CTFs , pwning machines on TryHackMe and HackTheBox , and tinkering with electronics . This repo is basically my personal brain dump , where I document my projects, things I\u2019m learning, and random experiments. \ud83d\udea7 Still a work in progress... updates will come whenever I get around to it! \ud83d\ude06","title":"~$ whoami"},{"location":"#find-me-here","text":"","title":"\ud83d\udcec Find me here:"},{"location":"HOW_IT_WORKS/","text":"Pwnagotchi: How it Works \u00b6 Pwnagotchi is an A2C-based (\u201cAI\u201d) powered by bettercap that learns from its surrounding WiFi environment in order to maximize the crackable WPA key material it captures (either through passive sniffing or by performing deauthentication and association attacks ). This material is collected on disk as PCAP files containing any form of crackable handshake supported by hashcat , including full and half WPA handshakes as well as PMKIDs . Key Terms \u00b6 A2C : This stands for Advantage Actor-Critic , which is an algorithm used in reinforcement learning . It combines both the actor (which decides what action to take) and the critic (which evaluates the action taken). A2C is used in the Pwnagotchi\u2019s AI to help it adapt and improve its actions over time, based on the feedback from its environment. Bettercap : This is a tool used for network attacks and packet manipulation , which allows Pwnagotchi to interact with wireless networks and gather data for Wi-Fi cracking . Deauthentication and Association Attacks : These are types of attacks used to disrupt the connection between a device and a Wi-Fi network. Deauthentication causes a device to disconnect from a network, and Association attacks allow Pwnagotchi to intercept the process and capture handshakes . PCAP files : These are files used to store network traffic data, specifically Wi-Fi handshakes (critical for cracking WPA keys). Pwnagotchi collects these for later hashcat processing. Handshakes : These are pieces of data exchanged between a Wi-Fi client and an access point during the connection process. They are essential for cracking WPA keys . Hashcat : A password cracking tool used to crack encrypted data like WPA handshakes. It can use various techniques to try and break the encryption. PMKID : This is a specific type of data that can also be used to crack WPA encryption. PMKID is a Pre-Shared Key identifier used in WPA2 networks and is often targeted in Wi-Fi hacking . How does Pwnagotchi work? \u00b6 Instead of merely playing Super Mario or Atari games like most reinforcement learning-based AI (yawn), Pwnagotchi tunes its own parameters over time to get better at pwning WiFi things in the environments you expose it to. To be more precise, Pwnagotchi is using an LSTM with an MLP feature extractor as its policy network for the A2C agent . If you\u2019re unfamiliar with A2C , here is a very good introductory explanation (in comic form!) of the basic principles behind how Pwnagotchi learns. Be sure to check out the Usage doc for more pragmatic details of how to help your Pwnagotchi learn as quickly as possible. LSTM (Long Short-Term Memory) : A type of recurrent neural network (RNN) used in machine learning. LSTM networks are great for learning from sequences of data (like Wi-Fi networks over time) because they can \"remember\" past events and adjust their actions accordingly. MLP (Multilayer Perceptron) : A type of neural network used for feature extraction, which helps the system analyze and process data more effectively. Pwnagotchi uses it to process information from the Wi-Fi environment and make better decisions. Unlike the usual reinforcement learning simulations, Pwnagotchi actually learns at a human timescale because it is interacting with a real-world environment instead of a well-defined virtual environment (like playing Super Mario). Time for a Pwnagotchi is measured in epochs ; a single epoch can last anywhere from a few seconds to many minutes, depending on how many access points and client stations are visible. Epoch : In machine learning, an epoch refers to one complete cycle through the entire dataset. For Pwnagotchi, this means a cycle of interaction with Wi-Fi networks. Do not expect your Pwnagotchi to perform amazingly well at the very beginning, as it will be exploring several combinations of key parameters to determine ideal adjustments for pwning the particular environment you are exposing it to during its beginning epochs ... but definitely listen to your Pwnagotchi when it tells you it's bored! Bring it into novel WiFi environments with you and have it observe new networks and capture new handshakes\u2014and you'll see. :) Multi-Unit Interaction \u00b6 Multiple units within close physical proximity can \u201ctalk\u201d to each other, advertising their own presence to each other by broadcasting custom information elements using a parasite protocol I\u2019ve built on top of the existing dot11 standard. Over time, two or more Pwnagotchi units trained together will learn to cooperate upon detecting each other\u2019s presence by dividing the available channels among them for optimal pwnage. Parasite protocol : A custom protocol developed to allow multiple Pwnagotchi devices to communicate with each other, sharing information about their surrounding networks and synchronizing their activities for more efficient Wi-Fi cracking. dot11 standard : Refers to the IEEE 802.11 standard , which defines the protocols for wireless networking , like Wi-Fi. This is the foundation for how Pwnagotchi interacts with Wi-Fi networks. Moods and States \u00b6 Depending on the status of the unit, several states and state transitions are configurable and represented on the display as different moods , expressions , and sentences. Pwnagotchi speaks many languages, too! Moods : The \"mood\" refers to the way Pwnagotchi expresses its internal state visually and verbally. Moods can change based on how well it is performing or how \"bored\" it is with the environment. Of course, it IS possible to run your Pwnagotchi with the AI disabled (configurable in config.toml ). Why might you want to do this? Perhaps you simply want to use your own fixed parameters (instead of letting the AI decide for you), or maybe you want to save battery and CPU cycles, or maybe it\u2019s just you have strong concerns about aiding and abetting baby Skynet. Whatever your particular reasons may be: an AI-disabled Pwnagotchi is still a simple and very effective automated deauther , WPA handshake sniffer , and portable bettercap + webui dedicated hardware. Deauther : A tool that performs deauthentication attacks , disrupting Wi-Fi connections and enabling the capture of handshakes for WPA cracking. WebUI : A web user interface that allows you to interact with Pwnagotchi through a browser for easier management and monitoring.","title":"Pwnagotchi: How it Works"},{"location":"HOW_IT_WORKS/#pwnagotchi-how-it-works","text":"Pwnagotchi is an A2C-based (\u201cAI\u201d) powered by bettercap that learns from its surrounding WiFi environment in order to maximize the crackable WPA key material it captures (either through passive sniffing or by performing deauthentication and association attacks ). This material is collected on disk as PCAP files containing any form of crackable handshake supported by hashcat , including full and half WPA handshakes as well as PMKIDs .","title":"Pwnagotchi: How it Works"},{"location":"HOW_IT_WORKS/#key-terms","text":"A2C : This stands for Advantage Actor-Critic , which is an algorithm used in reinforcement learning . It combines both the actor (which decides what action to take) and the critic (which evaluates the action taken). A2C is used in the Pwnagotchi\u2019s AI to help it adapt and improve its actions over time, based on the feedback from its environment. Bettercap : This is a tool used for network attacks and packet manipulation , which allows Pwnagotchi to interact with wireless networks and gather data for Wi-Fi cracking . Deauthentication and Association Attacks : These are types of attacks used to disrupt the connection between a device and a Wi-Fi network. Deauthentication causes a device to disconnect from a network, and Association attacks allow Pwnagotchi to intercept the process and capture handshakes . PCAP files : These are files used to store network traffic data, specifically Wi-Fi handshakes (critical for cracking WPA keys). Pwnagotchi collects these for later hashcat processing. Handshakes : These are pieces of data exchanged between a Wi-Fi client and an access point during the connection process. They are essential for cracking WPA keys . Hashcat : A password cracking tool used to crack encrypted data like WPA handshakes. It can use various techniques to try and break the encryption. PMKID : This is a specific type of data that can also be used to crack WPA encryption. PMKID is a Pre-Shared Key identifier used in WPA2 networks and is often targeted in Wi-Fi hacking .","title":"Key Terms"},{"location":"HOW_IT_WORKS/#how-does-pwnagotchi-work","text":"Instead of merely playing Super Mario or Atari games like most reinforcement learning-based AI (yawn), Pwnagotchi tunes its own parameters over time to get better at pwning WiFi things in the environments you expose it to. To be more precise, Pwnagotchi is using an LSTM with an MLP feature extractor as its policy network for the A2C agent . If you\u2019re unfamiliar with A2C , here is a very good introductory explanation (in comic form!) of the basic principles behind how Pwnagotchi learns. Be sure to check out the Usage doc for more pragmatic details of how to help your Pwnagotchi learn as quickly as possible. LSTM (Long Short-Term Memory) : A type of recurrent neural network (RNN) used in machine learning. LSTM networks are great for learning from sequences of data (like Wi-Fi networks over time) because they can \"remember\" past events and adjust their actions accordingly. MLP (Multilayer Perceptron) : A type of neural network used for feature extraction, which helps the system analyze and process data more effectively. Pwnagotchi uses it to process information from the Wi-Fi environment and make better decisions. Unlike the usual reinforcement learning simulations, Pwnagotchi actually learns at a human timescale because it is interacting with a real-world environment instead of a well-defined virtual environment (like playing Super Mario). Time for a Pwnagotchi is measured in epochs ; a single epoch can last anywhere from a few seconds to many minutes, depending on how many access points and client stations are visible. Epoch : In machine learning, an epoch refers to one complete cycle through the entire dataset. For Pwnagotchi, this means a cycle of interaction with Wi-Fi networks. Do not expect your Pwnagotchi to perform amazingly well at the very beginning, as it will be exploring several combinations of key parameters to determine ideal adjustments for pwning the particular environment you are exposing it to during its beginning epochs ... but definitely listen to your Pwnagotchi when it tells you it's bored! Bring it into novel WiFi environments with you and have it observe new networks and capture new handshakes\u2014and you'll see. :)","title":"How does Pwnagotchi work?"},{"location":"HOW_IT_WORKS/#multi-unit-interaction","text":"Multiple units within close physical proximity can \u201ctalk\u201d to each other, advertising their own presence to each other by broadcasting custom information elements using a parasite protocol I\u2019ve built on top of the existing dot11 standard. Over time, two or more Pwnagotchi units trained together will learn to cooperate upon detecting each other\u2019s presence by dividing the available channels among them for optimal pwnage. Parasite protocol : A custom protocol developed to allow multiple Pwnagotchi devices to communicate with each other, sharing information about their surrounding networks and synchronizing their activities for more efficient Wi-Fi cracking. dot11 standard : Refers to the IEEE 802.11 standard , which defines the protocols for wireless networking , like Wi-Fi. This is the foundation for how Pwnagotchi interacts with Wi-Fi networks.","title":"Multi-Unit Interaction"},{"location":"HOW_IT_WORKS/#moods-and-states","text":"Depending on the status of the unit, several states and state transitions are configurable and represented on the display as different moods , expressions , and sentences. Pwnagotchi speaks many languages, too! Moods : The \"mood\" refers to the way Pwnagotchi expresses its internal state visually and verbally. Moods can change based on how well it is performing or how \"bored\" it is with the environment. Of course, it IS possible to run your Pwnagotchi with the AI disabled (configurable in config.toml ). Why might you want to do this? Perhaps you simply want to use your own fixed parameters (instead of letting the AI decide for you), or maybe you want to save battery and CPU cycles, or maybe it\u2019s just you have strong concerns about aiding and abetting baby Skynet. Whatever your particular reasons may be: an AI-disabled Pwnagotchi is still a simple and very effective automated deauther , WPA handshake sniffer , and portable bettercap + webui dedicated hardware. Deauther : A tool that performs deauthentication attacks , disrupting Wi-Fi connections and enabling the capture of handshakes for WPA cracking. WebUI : A web user interface that allows you to interact with Pwnagotchi through a browser for easier management and monitoring.","title":"Moods and States"},{"location":"Password%20Manager/","text":"Self-Hosting Vaultwarden on Raspberry Pi Zero 2 W \u00b6 Why? \u00b6 Many people use simple or reused passwords for online services because they are easier to remember. While I used to do the same, I realized that storing passwords in web browsers is neither secure nor advisable. To improve my security, I decided to set up a self-hosted password manager using Vaultwarden . Vaultwarden is a lightweight, self-hosted alternative to Bitwarden. It provides the same functionality while being optimized for low-resource devices like the Raspberry Pi Zero 2 W. It also offers features like Multi-Factor Authentication (MFA), backups, SSL encryption, and remote access, ensuring better security while giving me full control over my credentials. To achieve this, I used the following hardware : Raspberry Pi Zero 2 W , compact and low-power makes it ideal for self-hosted applications. Waveshare 2.13 inch e-paper HAT v4 MicroSD card with 32Gb Card reader Windows PC Step 1: Flash Raspberry Pi OS Lite (64-bit) \u00b6 The first step was to flash Raspberry Pi OS Lite (64-bit) onto the microSD card. I used the Raspberry Pi Imager tool to complete this process. Insert the microSD card into the card reader . Open Raspberry Pi Imager and Choose OS > Raspberry Pi OS (Other) > Raspberry Pi OS Lite (64-bit) . Choose the microSD card as the storage device. Click Next , then Edit Settings to configure: Enable Set hostname , set up a username and password , Configure Wireless LAN and Enable SSH to allow remote access. Enabling SSH allows remote access and control over the Raspberry Pi from another device. Since the Raspberry Pi Zero 2 W often runs headless (without a monitor or keyboard), SSH provides a convenient way to configure and manage the system over the network. Save and click Yes to use the settings, then wait to write . Step 2: Connect Over SSH \u00b6 Since SSH was enabled at the time of writing the OS, I can now connect to the Raspberry Pi over SSH using PuTTY : Insert the microSD card into the Raspberry Pi and power it on. Open PuTTY on my Windows PC. Enter the Raspberry Pi's IP address (found via nmap ) in the Host Name (or IP address) field. Ensure the Port is set to 22 and Connection type is SSH . Click Open to initiate the connection. When prompted, enter the username and password set during configuration. Step 3: On the terminal \u00b6 To make sure everything runs smoothly, I started by updating and upgrading the software packages: sudo apt update && sudo apt full-upgrade -y Install Docker and Portainer \u00b6 Install Docker : curl -sSL https://get.docker.com | sh Grant Docker permissions to my user (joaof): sudo usermod -aG docker joaof Rebooted the system for changes to take effect.: sudo reboot Although Docker containers can be managed via the command line, Portainer provides a user-friendly GUI interface for deploying and managing our Docker containers on Raspberry Pi. To pull the latest version of Portainer from Docker Hub: sudo docker pull portainer/portainer-ce:latest Creating and running a Portainer container. This command exposes the Portainer web interface on port 9000 and ensures Portainer is always restarted if the system reboots. sudo docker run -d -p 9000:9000 --restart=always --name=portainer -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest With the container running, opened then web browser and accessed the Portainer UI with: http://192.168.1.228:9000 . Install and Set Up Vaultwarden RS (Vaultwarden) \u00b6 After creating a Portainer account, I'll deploy and set up a self-hosted Vaultwarden server on the Pi. Click on Volume > Add Volume Created a volume named VaultwardenServer Containers > Add Container and did the following: Name: Vaultwarden Image: vaultwarden/server:1.32.0 (latest was not working) Map an additional port, forwarding 8080 on the host to 80 in the container. This allows any device on the local network to access the Vaultwarden server via http://192.168.1.228:8080. Volumes > Map additional volume with /data in the container field and the VaultwardenServer volume created before Under Restart Policy selected Always Finally, click Deploy the container and after a few minutes, the Vaultwarden server is displayed as healthy in the Portainer UI I can now visit http://192.168.1.228:8080 Which opens the Vaultwarden web UI. Set Up the reverse proxy \u00b6 To access and use Vaultwarden, I need to set up a reverse proxy. For this I'll be using Nginx Proxy Manager . Ran the following command to pull the latest nginx image and start the container: sudo docker run -d \\ --name=nginx-proxy-manager \\ -p 81:81 \\ -p 80:80 \\ -p 443:443 \\ -v /srv/dev-disk-by-label-Backup/Docker/nginx-proxy-manager/data:/data \\ -v /srv/dev-disk-by-label-Backup/Docker/nginx-proxy-manager/letsencrypt:/etc/letsencrypt \\ --restart unless-stopped \\ jc21/nginx-proxy-manager:latest To check if the container starts successfully, I opened Portainer and verified that the nginx-proxy-manager container was running. Another way would be to run: docker ps -a . If the container wasn\u2019t running, For troubleshooting: docker logs nginx-proxy-manager . With the container up I can access the Nginx Proxy Manager web UI at http://192.168.1.228:81 . Securing Vaultwarden with HTTPS Using Let\u2019s Encrypt & DuckDNS \u00b6 Now that the reverse proxy is set up, I need to secure access to Vaultwarden with HTTPS. I'll use DuckDNS for dynamic DNS, and Let\u2019s Encrypt to generate a free SSL certificate. This will allow me to access Vaultwarden securely from anywhere without relying on a static IP or a paid domain. Set Up DuckDNS \u00b6 Visited DuckDNS and created an account. Added a new subdomain chaveman.duckdns.org and linked it to my IPv4 address . Copied my DuckDNS Token from the page (I'll need it later). Generate an SSL Certificate Using Let's Encrypt \u00b6 Used Certbot with the DNS-01 challenge to obtain an SSL certificate for my DuckDNS domain: Ran the following command to request a certificate using the DNS-01 challenge : sudo apt update && sudo apt install certbot -y sudo certbot certonly --manual --preferred-challenges dns -d chaveman.duckdns.org Certbot provided a TXT record that needs to be added to DNS for verification. Using DuckDNS's update URL: https://www.duckdns.org/update?domains=chaveman&token=MY_TOKEN&txt=TXTVALUE&verbose=true i got an OK and this means DuckDNS set my TXT record. To make sure that the TXT Record was Published waited a couple of minutes for DNS to propagate and using Google Admin Toolbox (Dig) I could see my TXT Value value under the ANSWER section so we're good to go. Pressed Enter and Certbot created two cert files fullchain.pem and privkey.pem in /etc/letsencrypt/live/Vaultwarden.duckdns.org/ . sudo certbot certificates to check the certificates expirity date, was 90 days so to make it automaticaly renew: sudo crontab -e to open the crontab file with NANO and added the cron job 0 0 * * * certbot renew --quiet which will run Certbot command to renew the SSL certificates automatically, ensuring the website's encryption remains valid without manual intervention. Nginx Proxy Manager \u00b6 Since the Web UI\u2019s file explorer only shows local files, I had to copy the cert files from the Raspberry Pi to my local machine so they could be uploaded. Copy the cert files to my local machine using scp (secure copy): scp joaof@192.168.1.228:/etc/letsencrypt/live/Vaultwarden.duckdns.org/fullchain.pem /home/joaof/Documents/Certificates scp joaof@192.168.1.228:/etc/letsencrypt/live/Vaultwarden.duckdns.org/privkey.pem /home/joaof/Documents/Certificates Returned to the Nginx Proxy Manager Web UI > SSL Certificates > Add SSL Certificate > Custom and selected the cert files: Add Proxy Host : Under SSL : At this point I should've been able to connect to https://chaveman.duckdns.org but i was getting an SSL error on the browser and using Port Checker I can see that my ISP is blocking inbound traffic for port 443. Access my router configurations to port forward the 443 port to the rpi. Finally connect to https://chaveman.duckdns.org and access Vaultwarden. Enhancing Vaultwarden with an E-Paper Display \u00b6 Enabled SPI on my Raspberry Pi by running: sudo raspi-config Navigated to Interfacing Options > SPI > Enable After enabling SPI, I rebooted the system: sudo reboot Installing the necessary Python libraries: sudo apt-get update sudo apt-get install python3-pip python3-pil python3-numpy sudo apt-get install python3-spidev python3-rpi.gpio sudo apt-get install python3-psutil Cloned the waveshareteam repo and moved into the correct directory: git clone https://github.com/waveshare/e-Paper.git cd ~/e-Paper/RaspberryPi_JetsonNano/python For the Waveshare 2.13-inch v4 display, I used the epd2in13_V4 module from ../lib/waveshare_epd and tested it using ../examples/epd2in13_V4_test.py . From there, I built system_monitor_v1 to display system info like temperature, uptime, and IP address. outra possibilidade seria obter um dominio e cloudflare tunnel","title":"Self-Hosted Password Manager"},{"location":"Password%20Manager/#self-hosting-vaultwarden-on-raspberry-pi-zero-2-w","text":"","title":"Self-Hosting Vaultwarden on Raspberry Pi Zero 2 W"},{"location":"Password%20Manager/#why","text":"Many people use simple or reused passwords for online services because they are easier to remember. While I used to do the same, I realized that storing passwords in web browsers is neither secure nor advisable. To improve my security, I decided to set up a self-hosted password manager using Vaultwarden . Vaultwarden is a lightweight, self-hosted alternative to Bitwarden. It provides the same functionality while being optimized for low-resource devices like the Raspberry Pi Zero 2 W. It also offers features like Multi-Factor Authentication (MFA), backups, SSL encryption, and remote access, ensuring better security while giving me full control over my credentials. To achieve this, I used the following hardware : Raspberry Pi Zero 2 W , compact and low-power makes it ideal for self-hosted applications. Waveshare 2.13 inch e-paper HAT v4 MicroSD card with 32Gb Card reader Windows PC","title":"Why?"},{"location":"Password%20Manager/#step-1-flash-raspberry-pi-os-lite-64-bit","text":"The first step was to flash Raspberry Pi OS Lite (64-bit) onto the microSD card. I used the Raspberry Pi Imager tool to complete this process. Insert the microSD card into the card reader . Open Raspberry Pi Imager and Choose OS > Raspberry Pi OS (Other) > Raspberry Pi OS Lite (64-bit) . Choose the microSD card as the storage device. Click Next , then Edit Settings to configure: Enable Set hostname , set up a username and password , Configure Wireless LAN and Enable SSH to allow remote access. Enabling SSH allows remote access and control over the Raspberry Pi from another device. Since the Raspberry Pi Zero 2 W often runs headless (without a monitor or keyboard), SSH provides a convenient way to configure and manage the system over the network. Save and click Yes to use the settings, then wait to write .","title":"Step 1: Flash Raspberry Pi OS Lite (64-bit)"},{"location":"Password%20Manager/#step-2-connect-over-ssh","text":"Since SSH was enabled at the time of writing the OS, I can now connect to the Raspberry Pi over SSH using PuTTY : Insert the microSD card into the Raspberry Pi and power it on. Open PuTTY on my Windows PC. Enter the Raspberry Pi's IP address (found via nmap ) in the Host Name (or IP address) field. Ensure the Port is set to 22 and Connection type is SSH . Click Open to initiate the connection. When prompted, enter the username and password set during configuration.","title":"Step 2: Connect Over SSH"},{"location":"Password%20Manager/#step-3-on-the-terminal","text":"To make sure everything runs smoothly, I started by updating and upgrading the software packages: sudo apt update && sudo apt full-upgrade -y","title":"Step 3: On the terminal"},{"location":"Password%20Manager/#install-docker-and-portainer","text":"Install Docker : curl -sSL https://get.docker.com | sh Grant Docker permissions to my user (joaof): sudo usermod -aG docker joaof Rebooted the system for changes to take effect.: sudo reboot Although Docker containers can be managed via the command line, Portainer provides a user-friendly GUI interface for deploying and managing our Docker containers on Raspberry Pi. To pull the latest version of Portainer from Docker Hub: sudo docker pull portainer/portainer-ce:latest Creating and running a Portainer container. This command exposes the Portainer web interface on port 9000 and ensures Portainer is always restarted if the system reboots. sudo docker run -d -p 9000:9000 --restart=always --name=portainer -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest With the container running, opened then web browser and accessed the Portainer UI with: http://192.168.1.228:9000 .","title":"Install Docker and Portainer"},{"location":"Password%20Manager/#install-and-set-up-vaultwarden-rs-vaultwarden","text":"After creating a Portainer account, I'll deploy and set up a self-hosted Vaultwarden server on the Pi. Click on Volume > Add Volume Created a volume named VaultwardenServer Containers > Add Container and did the following: Name: Vaultwarden Image: vaultwarden/server:1.32.0 (latest was not working) Map an additional port, forwarding 8080 on the host to 80 in the container. This allows any device on the local network to access the Vaultwarden server via http://192.168.1.228:8080. Volumes > Map additional volume with /data in the container field and the VaultwardenServer volume created before Under Restart Policy selected Always Finally, click Deploy the container and after a few minutes, the Vaultwarden server is displayed as healthy in the Portainer UI I can now visit http://192.168.1.228:8080 Which opens the Vaultwarden web UI.","title":"Install and Set Up Vaultwarden RS (Vaultwarden)"},{"location":"Password%20Manager/#set-up-the-reverse-proxy","text":"To access and use Vaultwarden, I need to set up a reverse proxy. For this I'll be using Nginx Proxy Manager . Ran the following command to pull the latest nginx image and start the container: sudo docker run -d \\ --name=nginx-proxy-manager \\ -p 81:81 \\ -p 80:80 \\ -p 443:443 \\ -v /srv/dev-disk-by-label-Backup/Docker/nginx-proxy-manager/data:/data \\ -v /srv/dev-disk-by-label-Backup/Docker/nginx-proxy-manager/letsencrypt:/etc/letsencrypt \\ --restart unless-stopped \\ jc21/nginx-proxy-manager:latest To check if the container starts successfully, I opened Portainer and verified that the nginx-proxy-manager container was running. Another way would be to run: docker ps -a . If the container wasn\u2019t running, For troubleshooting: docker logs nginx-proxy-manager . With the container up I can access the Nginx Proxy Manager web UI at http://192.168.1.228:81 .","title":"Set Up the reverse proxy"},{"location":"Password%20Manager/#securing-vaultwarden-with-https-using-lets-encrypt-duckdns","text":"Now that the reverse proxy is set up, I need to secure access to Vaultwarden with HTTPS. I'll use DuckDNS for dynamic DNS, and Let\u2019s Encrypt to generate a free SSL certificate. This will allow me to access Vaultwarden securely from anywhere without relying on a static IP or a paid domain.","title":"Securing Vaultwarden with HTTPS Using Let\u2019s Encrypt &amp; DuckDNS"},{"location":"Password%20Manager/#set-up-duckdns","text":"Visited DuckDNS and created an account. Added a new subdomain chaveman.duckdns.org and linked it to my IPv4 address . Copied my DuckDNS Token from the page (I'll need it later).","title":"Set Up DuckDNS"},{"location":"Password%20Manager/#generate-an-ssl-certificate-using-lets-encrypt","text":"Used Certbot with the DNS-01 challenge to obtain an SSL certificate for my DuckDNS domain: Ran the following command to request a certificate using the DNS-01 challenge : sudo apt update && sudo apt install certbot -y sudo certbot certonly --manual --preferred-challenges dns -d chaveman.duckdns.org Certbot provided a TXT record that needs to be added to DNS for verification. Using DuckDNS's update URL: https://www.duckdns.org/update?domains=chaveman&token=MY_TOKEN&txt=TXTVALUE&verbose=true i got an OK and this means DuckDNS set my TXT record. To make sure that the TXT Record was Published waited a couple of minutes for DNS to propagate and using Google Admin Toolbox (Dig) I could see my TXT Value value under the ANSWER section so we're good to go. Pressed Enter and Certbot created two cert files fullchain.pem and privkey.pem in /etc/letsencrypt/live/Vaultwarden.duckdns.org/ . sudo certbot certificates to check the certificates expirity date, was 90 days so to make it automaticaly renew: sudo crontab -e to open the crontab file with NANO and added the cron job 0 0 * * * certbot renew --quiet which will run Certbot command to renew the SSL certificates automatically, ensuring the website's encryption remains valid without manual intervention.","title":"Generate an SSL Certificate Using Let's Encrypt"},{"location":"Password%20Manager/#nginx-proxy-manager","text":"Since the Web UI\u2019s file explorer only shows local files, I had to copy the cert files from the Raspberry Pi to my local machine so they could be uploaded. Copy the cert files to my local machine using scp (secure copy): scp joaof@192.168.1.228:/etc/letsencrypt/live/Vaultwarden.duckdns.org/fullchain.pem /home/joaof/Documents/Certificates scp joaof@192.168.1.228:/etc/letsencrypt/live/Vaultwarden.duckdns.org/privkey.pem /home/joaof/Documents/Certificates Returned to the Nginx Proxy Manager Web UI > SSL Certificates > Add SSL Certificate > Custom and selected the cert files: Add Proxy Host : Under SSL : At this point I should've been able to connect to https://chaveman.duckdns.org but i was getting an SSL error on the browser and using Port Checker I can see that my ISP is blocking inbound traffic for port 443. Access my router configurations to port forward the 443 port to the rpi. Finally connect to https://chaveman.duckdns.org and access Vaultwarden.","title":"Nginx Proxy Manager"},{"location":"Password%20Manager/#enhancing-vaultwarden-with-an-e-paper-display","text":"Enabled SPI on my Raspberry Pi by running: sudo raspi-config Navigated to Interfacing Options > SPI > Enable After enabling SPI, I rebooted the system: sudo reboot Installing the necessary Python libraries: sudo apt-get update sudo apt-get install python3-pip python3-pil python3-numpy sudo apt-get install python3-spidev python3-rpi.gpio sudo apt-get install python3-psutil Cloned the waveshareteam repo and moved into the correct directory: git clone https://github.com/waveshare/e-Paper.git cd ~/e-Paper/RaspberryPi_JetsonNano/python For the Waveshare 2.13-inch v4 display, I used the epd2in13_V4 module from ../lib/waveshare_epd and tested it using ../examples/epd2in13_V4_test.py . From there, I built system_monitor_v1 to display system info like temperature, uptime, and IP address. outra possibilidade seria obter um dominio e cloudflare tunnel","title":"Enhancing Vaultwarden with an E-Paper Display"},{"location":"PwnZilla%20Guia/","text":"PwnZilla \u00b6 \ud83d\udccc Overview \u00b6 This project documents my journey of setting up and customizing a Pwnagotchi from scratch. The Pwnagotchi is an A2C-based \u201cAI\u201d powered by Bettercap. It learns from its surrounding WiFi environment to maximize the collection of crackable WPA key material. This can include material captured via passive sniffing or through deauthentication and association attacks. Originally created by EvilSocket, the project wasn't actively maintained for a while, but it was later picked up and continued by Jayofelony. For more up-to-date information, you can refer to both the new website and the original one . I\u2019ll be using Jayofelony's image (v2.8.9), 64-bit, as I\u2019m working with a Raspberry Pi Zero 2 W. If you\u2019re using different hardware, you can check the available images and choose the one that matches your setup. I\u2019ve chosen to use jayofelony\u2019s v2.8.9 image because the AI feature was removed in the later release. For this setup, I\u2019ll be using Windows as my main operating system, along with PuTTY for SSH access and 7-Zip to extract the image file. Additionally, I\u2019ll need RNDIS drivers, which can be downloaded from ModCloud here If you\u2019re looking for a deeper explanation of how the Pwnagotchi works, feel free to check out in depth info . Hardware \u00b6 Raspberry Pi Zero 2W with headers MicroSD Card 32Gb but 8Gb would be enough Waveshare v4 2.13Inch e-Paper HAT Micro USB Data+Power Raspberry Pi cable Power bank Installation & Flashing \u00b6 Downloaded v2.8.9 from jayofelony's repo Flashing the image using the Raspberry Pi Imager Configurations \u00b6","title":"Pwnzilla"},{"location":"PwnZilla%20Guia/#pwnzilla","text":"","title":"PwnZilla"},{"location":"PwnZilla%20Guia/#overview","text":"This project documents my journey of setting up and customizing a Pwnagotchi from scratch. The Pwnagotchi is an A2C-based \u201cAI\u201d powered by Bettercap. It learns from its surrounding WiFi environment to maximize the collection of crackable WPA key material. This can include material captured via passive sniffing or through deauthentication and association attacks. Originally created by EvilSocket, the project wasn't actively maintained for a while, but it was later picked up and continued by Jayofelony. For more up-to-date information, you can refer to both the new website and the original one . I\u2019ll be using Jayofelony's image (v2.8.9), 64-bit, as I\u2019m working with a Raspberry Pi Zero 2 W. If you\u2019re using different hardware, you can check the available images and choose the one that matches your setup. I\u2019ve chosen to use jayofelony\u2019s v2.8.9 image because the AI feature was removed in the later release. For this setup, I\u2019ll be using Windows as my main operating system, along with PuTTY for SSH access and 7-Zip to extract the image file. Additionally, I\u2019ll need RNDIS drivers, which can be downloaded from ModCloud here If you\u2019re looking for a deeper explanation of how the Pwnagotchi works, feel free to check out in depth info .","title":"\ud83d\udccc Overview"},{"location":"PwnZilla%20Guia/#hardware","text":"Raspberry Pi Zero 2W with headers MicroSD Card 32Gb but 8Gb would be enough Waveshare v4 2.13Inch e-Paper HAT Micro USB Data+Power Raspberry Pi cable Power bank","title":"Hardware"},{"location":"PwnZilla%20Guia/#installation-flashing","text":"Downloaded v2.8.9 from jayofelony's repo Flashing the image using the Raspberry Pi Imager","title":"Installation &amp; Flashing"},{"location":"PwnZilla%20Guia/#configurations","text":"","title":"Configurations"}]}